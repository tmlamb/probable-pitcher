import { AntDesign } from "@expo/vector-icons";
import React, { useEffect, useState } from "react";
import type {
  NativeScrollEvent,
  NativeSyntheticEvent,
  StyleProp,
  ViewStyle,
} from "react-native";
import { ActivityIndicator, Pressable, Text, View } from "react-native";
import { SafeAreaView } from "react-native-safe-area-context";
import { api } from "~/utils/api";
import { formatInTimeZone } from "date-fns-tz";
import tw from "~/utils/tailwind";
import * as Sentry from "@sentry/react-native";
import Background from "../components/Background";
import type { PitcherSubscription } from "@probable/ui";
import { subscriptionSchedule } from "@probable/ui";
import type { AnimatedStyle } from "react-native-reanimated";
import Animated, {
  Easing,
  FadeIn,
  FadeInLeft,
  FadeInRight,
  FadeOut,
  FadeOutLeft,
  FadeOutRight,
  LinearTransition,
  useAnimatedStyle,
  useSharedValue,
  withTiming,
} from "react-native-reanimated";
import TextThemed, { variantClasses } from "../components/TextThemed";
import type { ClassInput } from "twrnc";
import PressableThemed from "../components/PressableThemed";
import Card from "../components/Card";
import SearchInput from "../components/SearchInput";

export default function Index() {
  const subscriptionQuery = api.subscription.byUserId.useQuery();

  if (subscriptionQuery.isError) {
    Sentry.captureException(
      `Error fetching subscriptions on homepage: ${JSON.stringify(subscriptionQuery.error)}`,
    );
  }

  const schedule = subscriptionSchedule(subscriptionQuery.data);

  const [searchFilter, setSearchFilter] = useState<string>();
  const [isSearchActive, setIsSearchActive] = useState<boolean>(false);

  const searchQuery = api.pitcher.byFuzzyName.useQuery(searchFilter ?? "", {
    enabled: !!searchFilter && subscriptionQuery.isSuccess,
  });

  if (searchQuery.isError) {
    Sentry.captureException(
      `Error fuzzy searching for pitchers on homepage: ${JSON.stringify(searchQuery.error)}`,
    );
  }

  const utils = api.useUtils();

  const pitchers = searchQuery.data?.map((pitcher) => ({
    ...pitcher,
    subscription:
      subscriptionQuery.data?.find((sub) => sub.pitcherId === pitcher.id) ??
      undefined,
  }));

  const subscribeMutation = api.subscription.create.useMutation({
    scope: { id: "subscription" },
    onMutate: async ({ pitcherId }) => {
      await utils.subscription.byUserId.cancel();
      const previousSubscriptions = utils.subscription.byUserId.getData();
      utils.subscription.byUserId.setData(undefined, (old) => {
        if (old) {
          const pitcher = pitchers?.find((p) => p.id === pitcherId);
          if (pitcher) {
            return [
              ...old,
              // Optimistically add a new subscription with some dummy data.
              // This dummy data will be replaced with ids generated by the
              // database once the mutation completes.
              {
                id: String(new Date().valueOf()),
                enabled: true,
                pitcherId: pitcher.id,
                userId: "",
                pitcher: {
                  id: pitcher.id,
                  name: pitcher.name,
                  teamId: pitcher.teamId,
                  homeGames: pitcher.subscription?.pitcher.homeGames ?? [],
                  awayGames: pitcher.subscription?.pitcher.awayGames ?? [],
                  number: pitcher.number,
                  team: {
                    name: "",
                    id: "",
                    abbreviation: "",
                  },
                },
              },
            ];
          }
        }
      });
      return { previousSubscriptions };
    },
    onError: (err, _, context) => {
      utils.subscription.byUserId.setData(
        undefined,
        context?.previousSubscriptions,
      );
      Sentry.captureException(err);
    },
    onSettled: () => {
      utils.subscription.byUserId.invalidate().catch((e) => console.log(e));
      utils.pitcher.byFuzzyName.invalidate().catch((e) => console.log(e));
    },
  });

  const unsubscribeMutation = api.subscription.delete.useMutation({
    scope: { id: "subscription" },
    onMutate: async ({ subscriptionId }) => {
      await utils.subscription.byUserId.cancel();
      const previousSubscriptions = utils.subscription.byUserId.getData();
      utils.subscription.byUserId.setData(undefined, (old) =>
        old?.filter((s) => s.id !== subscriptionId),
      );
      return { previousSubscriptions };
    },
    onError: (err, _, context) => {
      utils.subscription.byUserId.setData(
        undefined,
        context?.previousSubscriptions,
      );
      Sentry.captureException(err);
    },
    onSettled: () => {
      utils.subscription.byUserId.invalidate().catch((e) => console.log(e));
      utils.pitcher.byFuzzyName.invalidate().catch((e) => console.log(e));
    },
  });

  // Why not just use section list? It doesn't have support from Reanimated's "itemLayoutAnimation"
  // prop, which we are depending on below for the cool layout transitions.
  const subscribedAndAvailablePitchers: (string | PitcherSubscription)[] = [];

  if (isSearchActive) {
    if (subscriptionQuery.data) {
      const subscribedPitchers =
        pitchers
          ?.filter((p) => p.subscription)
          .map((p) => ({
            ...p,
            team: {
              abbreviation: p.teamAbbreviation ?? null,
            },
          })) ?? [];
      if (subscribedPitchers.length) {
        subscribedAndAvailablePitchers.push("Subscribed");
        subscribedAndAvailablePitchers.push(...subscribedPitchers);
      }
    }

    if (searchFilter) {
      const availablePitchers =
        pitchers
          ?.filter((p) => !p.subscription)
          .map((p) => ({
            ...p,
            team: {
              abbreviation: p.teamAbbreviation ?? null,
            },
          })) ?? [];
      if (availablePitchers.length) {
        subscribedAndAvailablePitchers.push("Available");
        subscribedAndAvailablePitchers.push(...availablePitchers);
      }
    }
  } else {
    schedule.map((day) => {
      subscribedAndAvailablePitchers.push(day.nextGameDay);
      subscribedAndAvailablePitchers.push(...day.data);
    });
  }

  const pauseMutations =
    subscribeMutation.isPending ||
    unsubscribeMutation.isPending ||
    searchQuery.isFetching ||
    (!searchQuery.isSuccess && !!searchFilter) ||
    subscriptionQuery.isFetching;
  const opacity = useSharedValue(1);

  useEffect(() => {
    opacity.value = withTiming(pauseMutations ? 0.4 : 1, {
      duration: 150,
      easing: Easing.linear,
    });
  }, [opacity, pauseMutations]);

  const style = useAnimatedStyle(() => ({ opacity: opacity.value }), []);

  const [isEditing, setIsEditing] = useState(false);

  useEffect(() => {
    if (isSearchActive) setIsEditing(false);
  }, [isSearchActive]);

  const [isScrolling, setIsScrolling] = useState(false);

  const handleScroll = (event: NativeSyntheticEvent<NativeScrollEvent>) => {
    if (event.nativeEvent.contentOffset.y > 0) {
      setIsScrolling(true);
    } else {
      setIsScrolling(false);
    }
  };

  if (subscriptionQuery.isLoading) {
    return (
      <Background>
        <Animated.View
          style={tw`absolute w-screen h-screen justify-center`}
          entering={FadeIn}
          exiting={FadeOut}
        >
          <ActivityIndicator
            style={tw.style(variantClasses.primary)}
            size="large"
          />
        </Animated.View>
      </Background>
    );
  }

  return (
    <Background>
      <SafeAreaView>
        <Animated.FlatList
          // eslint-disable-next-line @typescript-eslint/ban-ts-comment
          // @ts-ignore - there is a type bug in Reanimated 2.9.x
          itemLayoutAnimation={LinearTransition.duration(175)}
          keyExtractor={(item) => {
            if (typeof item === "string") {
              return item;
            }
            return String(item.id);
          }}
          contentContainerStyle={tw.style(isSearchActive ? "pb-96" : "pb-48")}
          data={subscribedAndAvailablePitchers}
          keyboardShouldPersistTaps="handled"
          stickyHeaderIndices={[0]}
          stickyHeaderHiddenOnScroll={!isSearchActive}
          onScroll={(event) => handleScroll(event)}
          ListHeaderComponent={
            <View
              style={tw.style(
                "px-3 bg-slate-50 dark:bg-black",
                isSearchActive && isScrolling
                  ? "bg-opacity-80"
                  : "bg-opacity-100",
              )}
            >
              <Animated.View layout={LinearTransition.duration(250)}>
                <TextThemed
                  style={tw.style(
                    isSearchActive ? "text-transparent" : "",
                    "text-4xl font-bold tracking-tight mt-6 mb-3",
                  )}
                  accessibilityRole="header"
                >
                  Probable Pitcher
                </TextThemed>
              </Animated.View>
              <SearchInput
                onChange={(text) => setSearchFilter(text ?? "")}
                onActive={() => setIsSearchActive(true)}
                onCancel={() => setIsSearchActive(false)}
              />
            </View>
          }
          renderItem={({ index, item }) => {
            if (typeof item === "string") {
              return (
                <Animated.View
                  entering={FadeIn}
                  exiting={FadeOut}
                  style={tw`flex-row justify-between mt-3 mb-1 mx-6`}
                >
                  <TextThemed variant="muted" style={tw`uppercase text-sm`}>
                    {item}
                  </TextThemed>
                  {index === 0 &&
                    (searchQuery.isFetching ||
                      (!searchQuery.isSuccess && !!searchFilter) ||
                      subscribeMutation.isPending ||
                      unsubscribeMutation.isPending ||
                      subscriptionQuery.isFetching) && (
                      <Animated.View
                        entering={FadeIn}
                        exiting={FadeOut}
                        style={tw`-mr-1`}
                      >
                        <ActivityIndicator size="small" />
                      </Animated.View>
                    )}
                </Animated.View>
              );
            } else {
              return (
                <Animated.View entering={FadeIn} exiting={FadeOut}>
                  <PitcherCard
                    subscribeHandler={() => {
                      if (item.id) {
                        subscribeMutation.mutate({
                          pitcherId: item.id,
                        });
                      }
                    }}
                    unsubscribeHandler={
                      isEditing || isSearchActive
                        ? () =>
                            item.subscription
                              ? unsubscribeMutation.mutate({
                                  subscriptionId: item.subscription.id,
                                })
                              : undefined
                        : undefined
                    }
                    pitcher={item}
                    disabled={pauseMutations}
                    style={tw.style(
                      "border-b-2",
                      typeof subscribedAndAvailablePitchers[index - 1] ===
                        "string"
                        ? "rounded-t-xl"
                        : undefined,
                      !subscribedAndAvailablePitchers[index + 1] ||
                        typeof subscribedAndAvailablePitchers[index + 1] ===
                          "string"
                        ? "border-b-0 rounded-b-xl"
                        : undefined,
                    )}
                    buttonStyle={style}
                  />
                </Animated.View>
              );
            }
          }}
          ListEmptyComponent={
            <>
              {searchQuery.isSuccess && (
                <Animated.View entering={FadeIn.delay(150)} exiting={FadeOut}>
                  <TextThemed
                    variant="muted"
                    style={tw`mt-3 mb-6 mx-6 text-sm`}
                    accessibilityRole="summary"
                  >
                    No pitchers found. Try changing your search.
                  </TextThemed>
                </Animated.View>
              )}
              {searchQuery.isLoading ? (
                <Animated.View
                  style={tw`pt-6`}
                  entering={FadeIn}
                  exiting={FadeOut}
                >
                  <ActivityIndicator
                    style={tw.style(variantClasses.primary)}
                    size="large"
                  />
                </Animated.View>
              ) : (
                !searchQuery.isSuccess && (
                  <Animated.View entering={FadeIn} exiting={FadeOut}>
                    <TextThemed
                      variant="muted"
                      style={tw`mt-3 mb-6 mx-6 text-sm`}
                      accessibilityRole="summary"
                    >
                      Search for your favorite pitcher to add them to your list
                      of subscriptions.
                    </TextThemed>
                  </Animated.View>
                )
              )}
              {searchQuery.isError && (
                <Animated.View entering={FadeIn.delay(150)} exiting={FadeOut}>
                  <TextThemed
                    variant="alert"
                    style={tw`mt-3 mb-6 mx-6 text-sm`}
                    accessibilityRole="alert"
                  >
                    An error occurred while performing your search. Please try
                    again later.
                  </TextThemed>
                </Animated.View>
              )}
            </>
          }
        />
      </SafeAreaView>
    </Background>
  );
}

//<HeaderLeftContainer>
//  <Animated.View entering={FadeIn.delay(300)} exiting={FadeOut}>
//    <LinkButton
//      to={{ screen: "Settings" }}
//      style={tw`py-6 pl-3 pr-8 -my-6 -ml-4 flex flex-row items-center`}
//      accessibilityLabel="Navigate to Application Settings"
//    >
//      <SpecialText>
//        <AntDesign name="setting" size={24} />
//      </SpecialText>
//    </LinkButton>
//  </Animated.View>
//</HeaderLeftContainer>
//<HeaderRightContainer>
//  {!!subscriptions.data?.length &&
//    (isEditing ? (
//      <ButtonContainer
//        onPress={() => setIsEditing((isEditing) => !isEditing)}
//        style={tw`pl-8 pb-4 pr-3 -mb-4 -mr-4 flex flex-row items-center`}
//        accessibilityLabel={`${
//          isEditing ? "Disable" : "Enable"
//        } edit mode`}
//      >
//        <SpecialText style={tw`font-bold`}>Done</SpecialText>
//      </ButtonContainer>
//    ) : (
//      <ButtonContainer
//        onPress={() => setIsEditing((isEditing) => !isEditing)}
//        style={tw`pl-6 pb-4 pr-3 -mb-4 -mr-4 flex flex-row items-center`}
//        accessibilityLabel={`${
//          isEditing ? "Disable" : "Enable"
//        } edit mode`}
//      >
//        <SpecialText>Edit</SpecialText>
//      </ButtonContainer>
//    ))}
//</HeaderRightContainer>

const PitcherCard = ({
  subscribeHandler,
  unsubscribeHandler,
  pitcher,
  disabled,
  style,
  buttonStyle,
}: {
  subscribeHandler: () => void;
  unsubscribeHandler?: () => void;
  pitcher: PitcherSubscription;
  disabled?: boolean;
  style?: ClassInput;
  buttonStyle: StyleProp<AnimatedStyle<StyleProp<ViewStyle>>>;
}) => {
  return (
    <>
      <Card style={tw.style("relative mx-3", style)}>
        {pitcher.subscription && unsubscribeHandler && (
          <Animated.View entering={FadeInLeft} exiting={FadeOutLeft}>
            <PressableThemed
              style={tw`-my-3 -ml-3 p-3`}
              onPress={unsubscribeHandler}
              accessibilityLabel={""}
              disabled={disabled}
            >
              <Animated.View style={buttonStyle}>
                <TextThemed variant="alert">
                  <AntDesign name="minuscircle" size={16} />
                </TextThemed>
              </Animated.View>
            </PressableThemed>
          </Animated.View>
        )}
        <Animated.View
          style={tw`flex-1 flex-row justify-between items-center`}
          layout={LinearTransition}
        >
          <Animated.View
            style={tw`flex-row items-center`}
            layout={LinearTransition}
          >
            <TextThemed numberOfLines={2}>{pitcher.name}</TextThemed>
            <Animated.View
              style={tw`items-center mx-3 -my-1.5`}
              layout={LinearTransition}
            >
              {pitcher.number && (
                <TextThemed variant="muted" style={tw`text-xs -mb-0.5`}>
                  {pitcher.number}
                </TextThemed>
              )}
              <TextThemed variant="muted" style={tw`text-xs`}>
                {pitcher.team.abbreviation}
              </TextThemed>
            </Animated.View>
          </Animated.View>
          {pitcher.nextGameDate && !unsubscribeHandler && (
            <Animated.View
              style={tw``}
              entering={FadeInRight}
              exiting={FadeOutRight}
              layout={LinearTransition}
            >
              <TextThemed variant="muted" style={tw`ml-1.5 text-sm`}>
                {formatInTimeZone(
                  pitcher.nextGameDate,
                  Intl.DateTimeFormat().resolvedOptions().timeZone ||
                    "America/New_York",
                  "h:mmaaaaa",
                )}
              </TextThemed>
            </Animated.View>
          )}
        </Animated.View>
        {!pitcher.subscription && (
          <PressableThemed
            style={tw`right-0 p-3 -m-3 absolute items-end`}
            onPress={subscribeHandler}
            accessibilityLabel={""}
            disabled={disabled}
          >
            <Animated.View style={buttonStyle}>
              <TextThemed variant="primary" style="pr-3">
                <AntDesign name="pluscircle" size={16} />
              </TextThemed>
            </Animated.View>
          </PressableThemed>
        )}
      </Card>
    </>
  );
};
