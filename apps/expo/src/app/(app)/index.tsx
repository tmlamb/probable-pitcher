import type {
  NativeScrollEvent,
  NativeSyntheticEvent,
  StyleProp,
  ViewStyle,
} from "react-native";
import type { AnimatedStyle } from "react-native-reanimated";
import type { ClassInput } from "twrnc";
import React, { useEffect, useState } from "react";
import { ActivityIndicator, View } from "react-native";
import Animated, {
  Easing,
  FadeIn,
  FadeInLeft,
  FadeInRight,
  FadeOut,
  FadeOutLeft,
  FadeOutRight,
  LinearTransition,
  useAnimatedStyle,
  useSharedValue,
  withTiming,
} from "react-native-reanimated";
import { Stack, useRouter } from "expo-router";
import { AntDesign } from "@expo/vector-icons";
import * as Sentry from "@sentry/react-native";
import { useMutation, useQuery, useQueryClient } from "@tanstack/react-query";
import { formatInTimeZone } from "date-fns-tz";

import type { PitcherSubscription } from "@probable/ui";
import { subscriptionSchedule } from "@probable/ui";

import { trpc } from "~/utils/api";
import tw from "~/utils/tailwind";
import Background, {
  variantClasses as backgroundClasses,
} from "../../components/Background";
import Card from "../../components/Card";
import PressableThemed from "../../components/PressableThemed";
import SearchInput from "../../components/SearchInput";
import TextThemed, {
  variantClasses as textClasses,
} from "../../components/TextThemed";

export default function Home() {
  const queryClient = useQueryClient();
  const router = useRouter();

  const subscriptionQuery = useQuery(trpc.subscription.byUserId.queryOptions());

  if (subscriptionQuery.isError) {
    Sentry.captureException(
      `Error fetching subscriptions on homepage: ${JSON.stringify(subscriptionQuery.error)}`,
    );
  }

  const schedule = subscriptionSchedule(subscriptionQuery.data);

  const [searchFilter, setSearchFilter] = useState<string>();
  const [isSearchActive, setIsSearchActive] = useState<boolean>(false);

  const searchQuery = useQuery(
    trpc.pitcher.byFuzzyName.queryOptions(searchFilter ?? "", {
      enabled: !!searchFilter && subscriptionQuery.isSuccess,
    }),
  );

  if (searchQuery.isError) {
    Sentry.captureException(
      `Error fuzzy searching for pitchers on homepage: ${JSON.stringify(searchQuery.error)}`,
    );
  }

  const pitchers = searchQuery.data?.map((pitcher) => ({
    ...pitcher,
    subscription:
      subscriptionQuery.data?.find((sub) => sub.pitcherId === pitcher.id) ??
      undefined,
  }));

  const subscribeMutation = useMutation(
    trpc.subscription.create.mutationOptions({
      scope: { id: "subscription" },
      onMutate: async ({ pitcherId }) => {
        await queryClient.cancelQueries(
          trpc.subscription.byUserId.pathFilter(),
        );
        const previousSubscriptions = queryClient.getQueryData(
          trpc.subscription.byUserId.queryKey(),
        );
        queryClient.setQueryData(
          trpc.subscription.byUserId.queryKey(),
          (old) => {
            if (old) {
              const pitcher = pitchers?.find((p) => p.id === pitcherId);
              if (pitcher) {
                return [
                  ...old,
                  // Optimistically add a new subscription with some dummy data.
                  // This dummy data will be replaced with ids generated by the
                  // database once the mutation completes.
                  {
                    id: String(new Date().valueOf()),
                    enabled: true,
                    pitcherId: pitcher.id,
                    userId: "",
                    pitcher: {
                      id: pitcher.id,
                      name: pitcher.name,
                      teamId: pitcher.teamId,
                      homeGames: pitcher.subscription?.pitcher.homeGames ?? [],
                      awayGames: pitcher.subscription?.pitcher.awayGames ?? [],
                      number: pitcher.number,
                      team: {
                        name: "",
                        id: "",
                        abbreviation: "",
                      },
                    },
                  },
                ];
              }
            }
          },
        );
        return { previousSubscriptions };
      },
      onError: (err, _, context) => {
        queryClient.setQueryData(
          trpc.subscription.byUserId.queryKey(),
          context?.previousSubscriptions,
        );
        Sentry.captureException(err);
      },
      onSettled: () => {
        queryClient
          .invalidateQueries(trpc.subscription.byUserId.pathFilter())
          .catch(console.error);
        queryClient
          .invalidateQueries(trpc.pitcher.byFuzzyName.pathFilter())
          .catch(console.error);
      },
    }),
  );

  const unsubscribeMutation = useMutation(
    trpc.subscription.delete.mutationOptions({
      scope: { id: "subscription" },
      onMutate: async ({ subscriptionId }) => {
        await queryClient.cancelQueries(
          trpc.subscription.byUserId.pathFilter(),
        );
        const previousSubscriptions = queryClient.getQueryData(
          trpc.subscription.byUserId.queryKey(),
        );
        queryClient.setQueryData(trpc.subscription.byUserId.queryKey(), (old) =>
          old?.filter((s) => s.id !== subscriptionId),
        );
        return { previousSubscriptions };
      },
      onError: (err, _, context) => {
        queryClient.setQueryData(
          trpc.subscription.byUserId.queryKey(),
          context?.previousSubscriptions,
        );
        Sentry.captureException(err);
      },
      onSettled: () => {
        queryClient
          .invalidateQueries(trpc.subscription.byUserId.pathFilter())
          .catch(console.error);
        queryClient
          .invalidateQueries(trpc.pitcher.byFuzzyName.pathFilter())
          .catch(console.error);
      },
    }),
  );

  // Why not just use section list? It doesn't have support from Reanimated's "itemLayoutAnimation"
  // prop, which we are depending on below for the cool layout transitions.
  const subscribedAndAvailablePitchers: (string | PitcherSubscription)[] = [];

  if (isSearchActive) {
    if (subscriptionQuery.data) {
      const subscribedPitchers =
        pitchers
          ?.filter((p) => p.subscription)
          .map((p) => ({
            ...p,
            team: {
              abbreviation: p.teamAbbreviation ?? null,
            },
          })) ?? [];
      if (subscribedPitchers.length) {
        subscribedAndAvailablePitchers.push("Subscribed");
        subscribedAndAvailablePitchers.push(...subscribedPitchers);
      }
    }

    if (searchFilter) {
      const availablePitchers =
        pitchers
          ?.filter((p) => !p.subscription)
          .map((p) => ({
            ...p,
            team: {
              abbreviation: p.teamAbbreviation ?? null,
            },
          })) ?? [];
      if (availablePitchers.length) {
        subscribedAndAvailablePitchers.push("Available");
        subscribedAndAvailablePitchers.push(...availablePitchers);
      }
    }
  } else {
    schedule.map((day) => {
      subscribedAndAvailablePitchers.push(day.nextGameDay);
      subscribedAndAvailablePitchers.push(...day.data);
    });
  }

  const pauseMutations =
    subscribeMutation.isPending ||
    unsubscribeMutation.isPending ||
    searchQuery.isFetching ||
    (!searchQuery.isSuccess && !!searchFilter) ||
    subscriptionQuery.isFetching;
  const opacity = useSharedValue(1);

  useEffect(() => {
    opacity.value = withTiming(pauseMutations ? 0.4 : 1, {
      duration: 150,
      easing: Easing.linear,
    });
  }, [opacity, pauseMutations]);

  const style = useAnimatedStyle(() => ({ opacity: opacity.value }), []);

  const [isEditing, setIsEditing] = useState(false);

  useEffect(() => {
    if (isSearchActive) setIsEditing(false);
  }, [isSearchActive]);

  const [isScrolling, setIsScrolling] = useState(false);

  const handleScroll = (event: NativeSyntheticEvent<NativeScrollEvent>) => {
    if (event.nativeEvent.contentOffset.y > 0) {
      setIsScrolling(true);
    } else {
      setIsScrolling(false);
    }
  };

  return (
    <Background>
      <Stack.Screen
        options={{
          headerLeft: () => (
            <PressableThemed
              onPress={() => router.navigate("/settings")}
              accessibilityLabel="Navigate to Application Settings"
              style={tw`w-4 pr-6`}
            >
              <TextThemed variant="primary" style={tw`w-4 pr-6`}>
                <AntDesign name="setting" size={24} />
              </TextThemed>
            </PressableThemed>
          ),
          headerRight: () =>
            !!subscriptionQuery.data?.length &&
            (isEditing ? (
              <PressableThemed
                onPress={() => setIsEditing((isEditing) => !isEditing)}
                style={tw`-ml-3.5`}
                accessibilityLabel="Disable edit mode"
              >
                <TextThemed variant="primary" style={tw`font-bold`}>
                  Done
                </TextThemed>
              </PressableThemed>
            ) : (
              <PressableThemed
                onPress={() => setIsEditing((isEditing) => !isEditing)}
                style={tw``}
                accessibilityLabel="Enable edit mode"
              >
                <TextThemed variant="primary">Edit</TextThemed>
              </PressableThemed>
            )),
        }}
      />
      <Animated.FlatList
        entering={FadeIn}
        itemLayoutAnimation={LinearTransition.duration(175)}
        keyExtractor={(item) => {
          if (typeof item === "string") {
            return item;
          }
          return String(item.id);
        }}
        contentContainerStyle={tw.style(isSearchActive ? "pb-96" : "pb-48")}
        data={subscribedAndAvailablePitchers}
        keyboardShouldPersistTaps="handled"
        stickyHeaderIndices={[0]}
        stickyHeaderHiddenOnScroll={!isSearchActive}
        onScroll={(event) => handleScroll(event)}
        ListHeaderComponent={
          <View
            style={tw.style(
              backgroundClasses.default,
              isSearchActive || isScrolling
                ? "bg-opacity-80"
                : "bg-opacity-100",
            )}
          >
            <Animated.View layout={LinearTransition.duration(400)}>
              <TextThemed
                style={tw.style(
                  isSearchActive ? "text-transparent" : "mt-8",
                  "mb-3 pl-3 text-4xl font-bold tracking-tight",
                )}
                accessibilityRole="header"
              >
                Probable Pitcher
              </TextThemed>
            </Animated.View>
            <View style={tw`mx-3`}>
              <SearchInput
                onChange={(text) => setSearchFilter(text ?? "")}
                onActive={() => setIsSearchActive(true)}
                onCancel={() => setIsSearchActive(false)}
              />
            </View>
          </View>
        }
        renderItem={({ index, item }) => {
          if (typeof item === "string") {
            return (
              <Animated.View
                entering={FadeIn}
                exiting={FadeOut}
                style={tw`mx-6 mb-1 mt-3 flex-row justify-between`}
              >
                <TextThemed variant="muted" style={tw`text-sm uppercase`}>
                  {item}
                </TextThemed>
                {index === 0 &&
                  (searchQuery.isFetching ||
                    (!searchQuery.isSuccess && !!searchFilter) ||
                    subscribeMutation.isPending ||
                    unsubscribeMutation.isPending ||
                    subscriptionQuery.isFetching) && (
                    <Animated.View
                      entering={FadeIn}
                      exiting={FadeOut}
                      style={tw`-mr-1`}
                    >
                      <ActivityIndicator size="small" />
                    </Animated.View>
                  )}
              </Animated.View>
            );
          } else {
            return (
              <Animated.View entering={FadeIn} exiting={FadeOut}>
                <PitcherCard
                  subscribeHandler={() => {
                    if (item.id) {
                      subscribeMutation.mutate({
                        pitcherId: item.id,
                      });
                    }
                  }}
                  unsubscribeHandler={
                    isEditing || isSearchActive
                      ? () =>
                          item.subscription
                            ? unsubscribeMutation.mutate({
                                subscriptionId: item.subscription.id,
                              })
                            : undefined
                      : undefined
                  }
                  pitcher={item}
                  disabled={pauseMutations}
                  style={tw.style(
                    "rounded-none border-b-2",
                    typeof subscribedAndAvailablePitchers[index - 1] ===
                      "string"
                      ? "rounded-t-xl"
                      : undefined,
                    !subscribedAndAvailablePitchers[index + 1] ||
                      typeof subscribedAndAvailablePitchers[index + 1] ===
                        "string"
                      ? "rounded-b-xl border-b-0"
                      : undefined,
                  )}
                  buttonStyle={style}
                />
              </Animated.View>
            );
          }
        }}
        ListEmptyComponent={
          <View>
            {searchQuery.isSuccess && (
              <Animated.View entering={FadeIn.delay(150)} exiting={FadeOut}>
                <TextThemed
                  variant="muted"
                  style={tw`mx-6 mb-6 mt-3 text-sm`}
                  accessibilityRole="summary"
                >
                  No pitchers found, try changing your search
                </TextThemed>
              </Animated.View>
            )}
            {searchQuery.isLoading ? (
              <Animated.View
                style={tw`pt-6`}
                entering={FadeIn}
                exiting={FadeOut}
              >
                <ActivityIndicator
                  style={tw.style(textClasses.primary)}
                  size="large"
                />
              </Animated.View>
            ) : (
              !searchQuery.isSuccess && (
                <Animated.View entering={FadeIn} exiting={FadeOut}>
                  <TextThemed
                    variant="muted"
                    style={tw`mx-6 mb-6 mt-3 text-sm`}
                    accessibilityRole="summary"
                  >
                    Search for your favorite pitcher to add them to your list of
                    subscriptions
                  </TextThemed>
                </Animated.View>
              )
            )}
            {searchQuery.isError && (
              <Animated.View entering={FadeIn.delay(150)} exiting={FadeOut}>
                <TextThemed
                  variant="alert"
                  style={tw`mx-6 mb-6 mt-3 text-sm`}
                  accessibilityRole="alert"
                >
                  An error occurred while performing your search, please try
                  again later
                </TextThemed>
              </Animated.View>
            )}
          </View>
        }
      />
    </Background>
  );
}

const PitcherCard = ({
  subscribeHandler,
  unsubscribeHandler,
  pitcher,
  disabled,
  style,
  buttonStyle,
}: {
  subscribeHandler: () => void;
  unsubscribeHandler?: () => void;
  pitcher: PitcherSubscription;
  disabled?: boolean;
  style?: ClassInput;
  buttonStyle: StyleProp<AnimatedStyle<StyleProp<ViewStyle>>>;
}) => {
  return (
    <View>
      <Card style={tw.style("relative", style)}>
        {pitcher.subscription && unsubscribeHandler && (
          <Animated.View entering={FadeInLeft} exiting={FadeOutLeft}>
            <PressableThemed
              style={tw`-my-3 -ml-3 p-3`}
              onPress={unsubscribeHandler}
              accessibilityLabel={""}
              disabled={disabled}
            >
              <Animated.View style={buttonStyle}>
                <TextThemed variant="alert">
                  <AntDesign name="minuscircle" size={16} />
                </TextThemed>
              </Animated.View>
            </PressableThemed>
          </Animated.View>
        )}
        <Animated.View
          style={tw`flex-1 flex-row items-center justify-between`}
          layout={LinearTransition}
        >
          <Animated.View
            style={tw`flex-row items-center`}
            layout={LinearTransition}
          >
            <TextThemed numberOfLines={2}>{pitcher.name}</TextThemed>
            <Animated.View
              style={tw`-my-1.5 mx-3 items-center`}
              layout={LinearTransition}
            >
              {pitcher.number && (
                <TextThemed variant="muted" style={tw`-mb-0.5 text-xs`}>
                  {pitcher.number}
                </TextThemed>
              )}
              <TextThemed variant="muted" style={tw`text-xs`}>
                {pitcher.team.abbreviation}
              </TextThemed>
            </Animated.View>
          </Animated.View>
          {pitcher.nextGameDate && !unsubscribeHandler && (
            <Animated.View
              style={tw``}
              entering={FadeInRight}
              exiting={FadeOutRight}
              layout={LinearTransition}
            >
              <TextThemed variant="muted" style={tw`ml-1.5 text-sm`}>
                {formatInTimeZone(
                  pitcher.nextGameDate,
                  Intl.DateTimeFormat().resolvedOptions().timeZone ||
                    "America/New_York",
                  "h:mmaaaaa",
                )}
              </TextThemed>
            </Animated.View>
          )}
        </Animated.View>
        {!pitcher.subscription && (
          <PressableThemed
            style={tw`absolute right-0 -m-3 items-end p-3`}
            onPress={subscribeHandler}
            accessibilityLabel={""}
            disabled={disabled}
          >
            <Animated.View style={buttonStyle}>
              <TextThemed variant="primary" style="pr-3">
                <AntDesign name="pluscircle" size={16} />
              </TextThemed>
            </Animated.View>
          </PressableThemed>
        )}
      </Card>
    </View>
  );
};
